{"version":3,"sources":["../src/Hyperlist.js"],"sourcesContent":["import Hypermap from './Hypermap.js';\nimport { isMap } from './utils/json_processing.js';\n\nexport default class Hyperlist extends EventTarget {\n\tarray;\n\t#parent;\n\n\tconstructor(array, parent) {\n\t\tsuper();\n\t\tthis.array = array;\n\t\tthis.#parent = parent;\n\t}\n\n\tstatic fromLiteral(array, parent) {\n\t\tconst hyperlist = new this([], parent);\n\t\tconst convertedArray = array.map(value => {\n\t\t\tif (isMap(value)) {\n\t\t\t\treturn Hypermap.fromLiteral(value, hyperlist);\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\treturn this.fromLiteral(value, hyperlist);\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t});\n\t\thyperlist.array = convertedArray;\n\t\treturn hyperlist;\n\t}\n\n\tat(...path) {\n\t\tif (path.length === 0) {\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tconst head = this.array.at(path.at(0));\n\t\tif (head === undefined || (path.length > 1 && typeof head.at !== 'function')) {\n\t\t\treturn undefined;\n\t\t}\n\t\t\n\t\tif (path.length === 1) {\n\t\t\treturn head;\n\t\t} else {\n\t\t\treturn head.at(...path.slice(1));\n\t\t}\n\t}\n\n\tforEach(...args) {\n\t\tthis.array.forEach(...args);\n\t}\n\n\tlength() {\n\t\treturn this.array.length;\n\t}\n\n\tparent() {\n\t\treturn this.#parent;\n\t}\n\n\tchildren() {\n\t\treturn this.array\n\t\t\t.filter(value => value.isCollection && value.isCollection());\n\t}\n\n\tpath() {\n\t\tif (this.parent() === null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\treturn this.parent().path().concat(this.parent().keyFor(this));\n\t\t}\n\t}\n\n\tasync $(key, values) {\n\t\tconst node = this.at(key);\n\t\tif (values) {\n\t\t\tObject.entries(values).forEach(([key, value]) => {\n\t\t\t\tnode.set(key, value);\n\t\t\t});\n\t\t}\n\t\tawait node.fetch();\n\t}\n\n\tisCollection() {\n\t\treturn true;\n\t}\n\n\tkeyFor(node) {\n\t\tthis.array.indexOf(node);\n\t}\n\n\ttoJSON() {\n\t\treturn this.array;\n\t}\n}\n"],"names":["Hyperlist","EventTarget","array","parent","constructor","fromLiteral","hyperlist","convertedArray","map","value","isMap","Hypermap","Array","isArray","at","path","length","head","undefined","slice","forEach","args","children","filter","isCollection","concat","keyFor","$","key","values","node","Object","entries","set","fetch","indexOf","toJSON"],"mappings":";;;;+BAGA;;aAAqBA;;iEAHA;iCACC;;;;;;AAEP,MAAMA,kBAAkBC;IACtCC,MAAM;IACN,CAACC,MAAM,CAAC;IAERC,YAAYF,KAAK,EAAEC,MAAM,CAAE;QAC1B,KAAK;QACL,IAAI,CAACD,KAAK,GAAGA;QACb,IAAI,CAAC,CAACC,MAAM,GAAGA;IAChB;IAEA,OAAOE,YAAYH,KAAK,EAAEC,MAAM,EAAE;QACjC,MAAMG,YAAY,IAAI,IAAI,CAAC,EAAE,EAAEH;QAC/B,MAAMI,iBAAiBL,MAAMM,GAAG,CAACC,CAAAA,QAAS;YACzC,IAAIC,IAAAA,sBAAK,EAACD,QAAQ;gBACjB,OAAOE,iBAAQ,CAACN,WAAW,CAACI,OAAOH;YACpC,OAAO,IAAIM,MAAMC,OAAO,CAACJ,QAAQ;gBAChC,OAAO,IAAI,CAACJ,WAAW,CAACI,OAAOH;YAChC,OAAO;gBACN,OAAOG;YACR,CAAC;QACF;QACAH,UAAUJ,KAAK,GAAGK;QAClB,OAAOD;IACR;IAEAQ,GAAG,GAAGC,IAAI,EAAE;QACX,IAAIA,KAAKC,MAAM,KAAK,GAAG;YACtB,OAAO,IAAI;QACZ,CAAC;QAED,MAAMC,OAAO,IAAI,CAACf,KAAK,CAACY,EAAE,CAACC,KAAKD,EAAE,CAAC;QACnC,IAAIG,SAASC,aAAcH,KAAKC,MAAM,GAAG,KAAK,OAAOC,KAAKH,EAAE,KAAK,YAAa;YAC7E,OAAOI;QACR,CAAC;QAED,IAAIH,KAAKC,MAAM,KAAK,GAAG;YACtB,OAAOC;QACR,OAAO;YACN,OAAOA,KAAKH,EAAE,IAAIC,KAAKI,KAAK,CAAC;QAC9B,CAAC;IACF;IAEAC,QAAQ,GAAGC,IAAI,EAAE;QAChB,IAAI,CAACnB,KAAK,CAACkB,OAAO,IAAIC;IACvB;IAEAL,SAAS;QACR,OAAO,IAAI,CAACd,KAAK,CAACc,MAAM;IACzB;IAEAb,SAAS;QACR,OAAO,IAAI,CAAC,CAACA,MAAM;IACpB;IAEAmB,WAAW;QACV,OAAO,IAAI,CAACpB,KAAK,CACfqB,MAAM,CAACd,CAAAA,QAASA,MAAMe,YAAY,IAAIf,MAAMe,YAAY;IAC3D;IAEAT,OAAO;QACN,IAAI,IAAI,CAACZ,MAAM,OAAO,IAAI,EAAE;YAC3B,OAAO,EAAE;QACV,OAAO;YACN,OAAO,IAAI,CAACA,MAAM,GAAGY,IAAI,GAAGU,MAAM,CAAC,IAAI,CAACtB,MAAM,GAAGuB,MAAM,CAAC,IAAI;QAC7D,CAAC;IACF;IAEA,MAAMC,EAAEC,GAAG,EAAEC,MAAM,EAAE;QACpB,MAAMC,OAAO,IAAI,CAAChB,EAAE,CAACc;QACrB,IAAIC,QAAQ;YACXE,OAAOC,OAAO,CAACH,QAAQT,OAAO,CAAC,CAAC,CAACQ,KAAKnB,MAAM,GAAK;gBAChDqB,KAAKG,GAAG,CAACL,KAAKnB;YACf;QACD,CAAC;QACD,MAAMqB,KAAKI,KAAK;IACjB;IAEAV,eAAe;QACd,OAAO,IAAI;IACZ;IAEAE,OAAOI,IAAI,EAAE;QACZ,IAAI,CAAC5B,KAAK,CAACiC,OAAO,CAACL;IACpB;IAEAM,SAAS;QACR,OAAO,IAAI,CAAClC,KAAK;IAClB;AACD"}